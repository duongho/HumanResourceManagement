package com.ksu.grad.entity;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Employee generated by hbm2java
 */
@Entity
@Table(name = "Employee", catalog = "EMAS", uniqueConstraints = { @UniqueConstraint(columnNames = "LoginId"),
		@UniqueConstraint(columnNames = "PersonId") })
public class Employee implements java.io.Serializable {

	private Integer id;
	private Login login;
	private Person person;
	private BigDecimal salary;
	private Date startDate;
	private Set<EmployeeHistory> employeeHistoriesForEmployeeId = new HashSet<EmployeeHistory>(0);
	private Set<Employee> employeesForEmployeeId = new HashSet<Employee>(0);
	private Set<Department> departments = new HashSet<Department>(0);
	private Set<Employee> employeesForManagerId = new HashSet<Employee>(0);
	private Set<EmployeeHistory> employeeHistoriesForModifiedBy = new HashSet<EmployeeHistory>(0);

	public Employee() {
	}

	public Employee(Login login, Person person, BigDecimal salary, Date startDate) {
		this.login = login;
		this.person = person;
		this.salary = salary;
		this.startDate = startDate;
	}

	public Employee(Login login, Person person, BigDecimal salary, Date startDate,
			Set<EmployeeHistory> employeeHistoriesForEmployeeId, Set<Employee> employeesForEmployeeId,
			Set<Department> departments, Set<Employee> employeesForManagerId,
			Set<EmployeeHistory> employeeHistoriesForModifiedBy) {
		this.login = login;
		this.person = person;
		this.salary = salary;
		this.startDate = startDate;
		this.employeeHistoriesForEmployeeId = employeeHistoriesForEmployeeId;
		this.employeesForEmployeeId = employeesForEmployeeId;
		this.departments = departments;
		this.employeesForManagerId = employeesForManagerId;
		this.employeeHistoriesForModifiedBy = employeeHistoriesForModifiedBy;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "LoginId", unique = true, nullable = false)
	public Login getLogin() {
		return this.login;
	}

	public void setLogin(Login login) {
		this.login = login;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PersonId", unique = true, nullable = false)
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@Column(name = "Salary", nullable = false, precision = 8)
	public BigDecimal getSalary() {
		return this.salary;
	}

	public void setSalary(BigDecimal salary) {
		this.salary = salary;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "StartDate", nullable = false, length = 19)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "employeeByEmployeeId")
	public Set<EmployeeHistory> getEmployeeHistoriesForEmployeeId() {
		return this.employeeHistoriesForEmployeeId;
	}

	public void setEmployeeHistoriesForEmployeeId(Set<EmployeeHistory> employeeHistoriesForEmployeeId) {
		this.employeeHistoriesForEmployeeId = employeeHistoriesForEmployeeId;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "EmployeeCorrelation", catalog = "EMAS", joinColumns = {
			@JoinColumn(name = "ManagerId", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "EmployeeId", nullable = false, updatable = false) })
	public Set<Employee> getEmployeesForEmployeeId() {
		return this.employeesForEmployeeId;
	}

	public void setEmployeesForEmployeeId(Set<Employee> employeesForEmployeeId) {
		this.employeesForEmployeeId = employeesForEmployeeId;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "employee")
	public Set<Department> getDepartments() {
		return this.departments;
	}

	public void setDepartments(Set<Department> departments) {
		this.departments = departments;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "EmployeeCorrelation", catalog = "EMAS", joinColumns = {
			@JoinColumn(name = "EmployeeId", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "ManagerId", nullable = false, updatable = false) })
	public Set<Employee> getEmployeesForManagerId() {
		return this.employeesForManagerId;
	}

	public void setEmployeesForManagerId(Set<Employee> employeesForManagerId) {
		this.employeesForManagerId = employeesForManagerId;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "employeeByModifiedBy")
	public Set<EmployeeHistory> getEmployeeHistoriesForModifiedBy() {
		return this.employeeHistoriesForModifiedBy;
	}

	public void setEmployeeHistoriesForModifiedBy(Set<EmployeeHistory> employeeHistoriesForModifiedBy) {
		this.employeeHistoriesForModifiedBy = employeeHistoriesForModifiedBy;
	}

}
